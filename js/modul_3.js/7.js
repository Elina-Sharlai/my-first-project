/**
 * –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments —ñ Array.from()
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Ä–∞–∑
 */

function showArguments() {
  // a = undefined
  // b = undefined
  // arguments = []
  console.log(arguments);
  const args = Array.from(arguments);
  // const args = [...arguments];
  console.log("args:", args);

  // return undefined
}

// showArguments(1, 2, 3);
// showArguments(1, 2, 3, 4, 5);
// showArguments(1, 2, 3, 4, 5, 6, 7);

// function checkStorage(available, ordered) {
//   if (available < ordered) {
//     return "Not enough goods in stock!";
//   } else {
//     return "Order is processed, our manager will contact you";
//   }
// }


// console.log(checkStorage(100, 50));
// console.log(checkStorage(100, 130));
// console.log(checkStorage(200, 20));
// console.log(checkStorage(200, 150));
// console.log(checkStorage(150, 180));

// function checkAge(age) {
//    if (age >= 18) {
//     return "You are an adult";
//   }
// }

// console.log(checkAge(20));
// console.log(checkAge(17));
// console.log(checkAge(10));
// console.log(checkAge(30));

// let room = 1;

// function printMessage(guestName, hotelName = "Peach Hotel", roomNumber = room) {
//   const message = `Room number ${roomNumber} in hotel ${hotelName} reserved by ${guestName}`;

//   room += 1;
//   return message;
// }

// const result = printMessage("Ajax");
// console.log("üöÄ ~ result:", result);
// const result2 = printMessage("Poly", "Strawberry Hotel");
// console.log("üöÄ ~ result2:", result2);

// function createLink(domen, protocol = "https://") {
//     const link = protocol + domen + "/";
//     return link;

// }

// const res1 = createLink(`goit.ua`);

// console.log("üöÄ ~ res1:", res1);

/**
 * –ü–µ—Ä–µ–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é add –¥–ª—è —Å–∫–ª–∞–¥–∞–Ω–Ω—è –¥–æ–≤—ñ–ª—å–Ω–æ—ó
 * –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (—á–∏—Å–µ–ª) –Ω–∞ function expression
 */

// HOSTING - –ø—Ä–æ—Ü–µ—Å –ø—ñ–¥–Ω—è—Ç—Ç—è —Ñ—É–Ω–∫—Ü—ñ—ó
// –§—É–Ω–∫—Ü—ñ—è –Ω–∏–∂—á–µ –º–∞—î –Ω–∞–∑–≤—É function declaration
// function add() {
//     const args = Array.from(arguments);
//     let total = 0;

// for (const arg of args) {
//     total  += arg;    
//     }
//     return total;
// }



// console.log(add(1, 2, 3));
// console.log(add(1, 2, 4, 5, 6));

// –§—É–Ω–∫—Ü—ñ—è –∑–≤–µ—Ä—Ö—É, –∑–∞–ø–∏—Å–∞–Ω–∞ —É –≤–∏–≥–ª—è–¥—ñ function expression - –∞–Ω–æ–Ω—ñ–º–Ω–∞ —Å–∞–º–æ–≤–∏–∫–ª–∏–∫–∞—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// IIFE - Immediately Invoked Function Expression

(function () {
  console.log("Worked 1");
})();
(function () {
  console.log("Worked 2");
})();
(function () {
  console.log("Worked 3");
})();
(function () {
  console.log("Worked 4");
})();

const fn1 = function () {
    console.log("Unonimous function worked ‚ú®");
    
 }

fn1();

// ============================== //
// –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Ç–∞ –æ–ø–µ—Ä—Ü—ñ–π –Ω–∞–¥ –Ω–∏–º–∏
const a = 1;
const b = 2;
const c = 3;

const d = multiply(a, b, c);

// ============================== //
// –û–ø–∏—Å —Å–∞–º–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–∞–¥ –∑–º—ñ–Ω–Ω–∏–º–∏
function multiply(a, b, c) {
  return a + b + c;
}
function divide(a, b, c) {
  return a + b + c;
}
function pow(base, pow) {
  return base ^ pow;
}

// ============================== //
// –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É –∑ –∫–æ–¥–æ–º
const multiply1 = function (a, b, c) {
  return a + b + c;
};
const divide1 = function (a, b, c) {
  return a + b + c;
};
const pow1 = function (base, pow) {
  return base ** pow;
};

// ============================== //
// –û–≥–æ–ª–æ—à–µ–Ω–Ω—è  –∑–º—ñ–Ω–Ω–∏—Ö —Ç–∞ –æ–ø–µ—Ä—Ü—ñ–π –Ω–∞–¥ –Ω–∏–º–∏
const a1 = multiply1(1, 2, 3);