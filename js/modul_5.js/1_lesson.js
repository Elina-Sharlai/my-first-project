/**
 * –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞ (callback)
 *
 * - –§—É–Ω–∫—Ü—ñ—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
 * - –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
 * - –Ü–Ω–ª–∞–π–Ω-–∫–æ–ª–±–µ–∫–∏
 */

function registerGuest(name, callback) {
  // name = "Mango"
  // callback = function (guestName) { console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${guestName}`) }
  callback(name);
}

registerGuest("Mango", function (guestName) {
//   console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${guestName}`);
});

registerGuest("Mango", function (guestName) {
//   console.log(`–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –≤–∞—à –Ω–æ–º–µ—Ä ${guestName}?`);
});

registerGuest("Poly", function (guestName) {
//   console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –≥–æ—Å—Ç–µ–π: ${guestName}`);
});

/**
 * –§—É–Ω–∫—Ü—ñ—è calc(a, b, callback)
 */

// function calc(a, b, callback) {
//   // a = 2
//   // b = 3
//   const result = callback(a, b);
    // console.log("calc:", result);
      // üí©üí©üí©
  // if (operator === "**") {
  //   base ** power;
  // } else if (operator === "%") {
  //   numerator % denominator;
  // } else if (operator === "*") {
  //   leftOperand * rightOperand;
  // } else if (operator === "/") {
  //   leftOperand / rightOperand;
  // }
// }

// callback-hell - –Ω–µ—á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –∫–æ–¥

// calc(2, 3, pow);

// calc(10, 8, rest);

// calc(1, 10, minus);

// functions
function pow(base, power) {
  return base ** power;
}
function rest(numerator, denominator) {
  return numerator % denominator;
}
function minus(leftOperand, rightOperand) {
  return leftOperand - rightOperand;
}

const res1 = pow(4, 2);
// console.log(res1);


/**
 * –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤,
 * –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
 * –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å
 * —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.
 */

function each(array, callback) {
  array = [64, 49, 36, 25, 16];
  // callback = function (value) {console.log("res2  res2:", res2);return value * 2;};
  const newArray = [];
  for (const item of array) {
    const result = callback(item);
    newArray.push(result);
  }
  return newArray;
}

const res2 = each([64, 49, 36, 25, 16], function (value) {
  return value * 2;
});
// console.log("res2:", res2);

const res3 = each([64, 49, 36, 25, 16], function (value) {
  return value - 10;
});
// console.log("res3:", res3);

const res4 = each([64, 49, 36, 25, 16], function (value) {
  return Math.sqrt(value);
});
// console.log("res4:", res4);

const res5 = each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
  return Math.ceil(value);
});
// console.log("res5 :", res5);

const res6 = each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
  return Math.floor(value);
});
// console.log("res6:", res6);

// Logger from Kahoot

function foo(callback) {
  callback(10);
}

function logger(a, b) {
//   console.log(a + b);
}

// foo(logger);

/**
 * –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
 * - –û–≥–æ–ª–æ—à–µ–Ω–Ω—è
 * - –Ø–≤–Ω–µ —ñ –Ω–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω—è
 * - –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments (...args)
 * - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
 */

function add(a, b, c) {
  return a + b + c;
}

const addArrow = (a, b, c) => a + b + c;

// console.log(add(5, 10, 15));
// console.log(addArrow(5, 10, 15));

function fnA() {
  return {
    a: 5,
  };
}

// console.log(fnA());

const arrowFnA = a => ({ a });

// console.log(arrowFnA(5));


/**
 * –§—É–Ω–∫—Ü—ñ—è calc(a, b, callback)
 */

function calc(a, b, callback) {
  const result = callback(a, b);
  console.log(result);
}

// calc(2, 3, (x, y) => x + y);

// calc(10, 8, (x, y) => x - y);

/**
 * –ú–µ—Ç–æ–¥ forEach(callback)
 * - –ü–æ–µ–ª–µ–º–µ–Ω—Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * - –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î
 * - –ó–∞–º—ñ–Ω—é—î –∫–ª–∞—Å–∏—á–Ω–∏–π for, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ—Ä–∏–≤–∞—Ç–∏ —Ü–∏–∫–ª
 */

const numbers = [5, 10, 15, 20, 25];
let total = 0;
[].forEach(() => { })
 
numbers.forEach((number, index, array) => total += number);
// console.log(total);

/**
 * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.
 */
// function logItems(items) {
//   console.log(items);
//   for (let i = 0; i < items.length; i += 1) {
//     console.log(`${i + 1} - ${items[i]}`);
//   }
// }

// function logItems(items) {
//     items.forEach((item, index) =>
//         console.log(`${index + 1} - ${item}`));
        
// }

// logItems(["Mango", "Poly", "Ajax"]);
// console.log("\n");
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

/**
 * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.
 */

// function printContactsInfo({ names, phones }) {
//   const nameList = names.split(",");
//   const phoneList = phones.split(",");
//   for (let i = 0; i < nameList.length; i += 1) {
//     console.log(`${nameList[i]}: ${phoneList[i]}`);
//   }
// }

// console.log(`${nameList[i]}: ${phoneList[i]}`);
// }

// printContactsInfo({
//   names: "Jacob,William,Solomon,Artemis",
//   phones: "89001234567,89001112233,890055566377,890055566300",
// });

/**
 * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.
 * –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
 */
// function calculateAverage(...args) {
//   let total = 0;
//   for (let i = 0; i < args.length; i++) {
//     total += args[i];
//   }
//   return total / args.length;
// }

// function calculateAverage(...args) {
//     let total = 0;
//  args.forEach((element) => (total += element))
//     return total / args.length;
// }





// console.log(calculateAverage(1, 2, 3, 4)); // 2.5
// console.log(calculateAverage(14, 8, 2)); // 8
// console.log(calculateAverage(27, 43, 2, 8, 36)); // 23.2

/**
 * Array.prototype.map()
 * - –ü–æ–µ–ª–µ–º–µ–Ω—Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * - –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * - –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–∞–∫–æ—ó –∂ –¥–æ–≤–∂–∏–Ω–∏
 */

const allCars = [
  { make: "Honda", model: "CR-V", amount: 14, price: 24045 },
  { make: "Honda", model: "Accord", amount: 2, price: 22455 },
  { make: "Mazda", model: "Mazda 6", amount: 8, price: 24195 },
  { make: "Mazda", model: "CX-9", amount: 7, price: 31520 },
  { make: "Toyota", model: "4Runner", amount: 19, price: 34210 },
  { make: "Toyota", model: "Sequoia", amount: 16, price: 45560 },
  { make: "Toyota", model: "Tacoma", amount: 4, price: 24320 },
  { make: "Ford", model: "F-150", amount: 11, price: 27110 },
  { make: "Ford", model: "Fusion", amount: 13, price: 22120 },
  { make: "Ford", model: "Explorer", amount: 6, price: 31660 },
];

/**
 * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModels –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π (–ø–æ–ª–µ model) –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤.
 */

const getModels = cars => {
    const models = cars.map(item => item.model);
    return models;
        
        
    
} 

// console.table(getModels(allCars));

/**
 * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è makeCarsWithDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ–∑ –∑–º—ñ–Ω–Ω–∏–º
 * –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–µ—Ä–µ–¥–∞–Ω–æ—ó –∑–Ω–∏–∂–∫–∏.
 */

const makeCarsWithDiscount = (cars, discount) =>
    cars.map(item => ({ ...item, price: item.price * (1 - discount) }));



// console.table(makeCarsWithDiscount(allCars, 0.2));
// console.table(makeCarsWithDiscount(allCars, 0.4));

/**–ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è –∑–∞ id */

const players = [
  { id: "player-1", name: "Mango", timePlayed: 310, points: 54, online: false },
  { id: "player-2", name: "Poly", timePlayed: 470, points: 92, online: true },
  { id: "player-3", name: "Kiwi", timePlayed: 230, points: 48, online: true },
  { id: "player-4", name: "Ajax", timePlayed: 150, points: 71, online: false },
  { id: "player-5", name: "Chelsy", timePlayed: 80, points: 48, online: true },
];
// console.table(players);

const playerIdToUpdate = "player-3";

// const updatedPlayers = players.map((player) => {
//     if (player.id === playerIdToUpdate) {
//         return { ...player, timePlayed: player.timePlayed + 100 };
//     }
//     return { ...player };
// });
 
// –°–∫–æ—Ä–æ—á—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–ø–∏—Å–æ–º —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

const updatedPlayers = players.map(player =>
  player.id === playerIdToUpdate
    ? { ...player, timePlayed: player.timePlayed + 100 }
    : { ...player }
);

// console.table(updatedPlayers);
// console.table(players);


/**
 * –ú–µ—Ç–æ–¥ flatMap
 */

const tweets = [
  {
    id: "000",
    likes: 5,
    tags: ["js", "nodejs"],
  },
  { id: "001", likes: 2, tags: ["html", "css"] },
  { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
  { id: "003", likes: 8, tags: ["css", "react"] },
  { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
];

const tags = tweets.flatMap((tweet, index, array) => {
  return tweet.tags;
});
// console.log(tags);

const updatedTweets = tweets.map((tweet, index, array) => {
  // tweet.likes += 1
  return {
    ...tweet,
    likes: tweet.likes + 1,
    tags: tweet.tags.slice(0, -1),
  };
});
// console.log("updatedTweets  updatedTweets:", updatedTweets);
// console.log("ORIGINAL:", tweets);
const url =
  "https://pixabay.com/api/?key=15249615-5ccf49bef51d4f01888f64cb2&q=yellow+flowers&image_type=photo";

fetch(url)
  .then(resp => {
    return resp.json();
  })
  .then(data => {
    const tags = data.hits[0].tags.split(",");
    // console.log("tags:", tags);
  });

// "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –æ–±'—î–∫—Ç–∏ —ñ —ó—Ö –º–µ—Ç–æ–¥–∏ –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É.
//    –î–ª—è —Ü—å–æ–≥–æ –∑—á–∏—Ç—É—î—Ç—å—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ json,
    // –æ—Ç—Ä–∏–º—É—é—á–∏ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ –∫–æ–∂–µ–Ω –æ–±'—î–∫—Ç –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —É —à–∞–±–ª–æ–Ω–Ω–∏–π –æ–±'—î–∫—Ç –∑ –º–µ—Ç–æ–¥–∞–º–∏,
    //  —É —è–∫–æ–º—É –æ–¥–∏–Ω –∑ –º–µ—Ç–æ–¥—ñ–≤ –¥–æ–¥–∞—î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –µ–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ —á–∏ —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è —è–∫–æ—Å—å –ø–æ —ñ–Ω—à–æ–º—É ?
// –û—Å—å –≥—Ä—É–±–∏–π –ø—Ä–∏–∫–ª–∞–¥ —Ç–æ–≥–æ, —â–æ –º–∞—é –Ω–∞ —É–≤–∞–∑—ñ:

// const readObject = JSON.parse(somejsonData); // –ó—á–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ json –∞–±–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∞–±–æ –æ–±'—î–∫—Ç –∑ –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏

// const templateObj = {
//   val1, // –ó–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥
//   val2, // —Ü—ñ–Ω–∞
//   val3, // –æ–ø–∏—Å
//   setValues(readObjectItem) {
//     const { val1, val2, val3 } = readObjectItem;
//     this.val1 = val1;
//     this.val2 = val2;
//     this.val3 = val3;
//     this.addItemToPage();
//   },
//   addItemToPage() { 
//     //–ö–æ–¥, —è–∫–∏–π –¥–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
//   }
// };

// –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
// readObject.forEach(element => {
//   templateObj.setValues(element);
// });

// "–ó–¥–µ–±—ñ–ª—å—à–æ–≥–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è,
//  –≤ —è–∫–æ–º—É —î –Ω–∞–±—ñ—Ä —Ñ—É–Ω–∫—Ü—ñ–π, –∫–æ–∂–Ω–∞ –∑ —è–∫–∏—Ö –≤–∏–∫–æ–Ω—É—î —á—ñ—Ç–∫–æ –≤–∏–∑–Ω–∞—á–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è.–ù–∞–ø—Ä–∏–∫–ª–∞–¥:

// getCardsData() { ... }
// createCardsMarkup() { ... }
// renderCards() { ... }

// –Ø–∫—â–æ –∂ —Ä–æ–∑–≥–ª—è–¥–∞—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ø—ñ–¥—Ö—ñ–¥ –û–û–ü,
    // —Ç–æ–¥—ñ –º–∏ –æ–±'—î–¥–Ω—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –¥–∞–Ω—ñ –≤ –æ–±'—î–∫—Ç, —è–∫–∏–π –º–∞—î —Å—Ç–∞–Ω(–¥–∞–Ω—ñ) —Ç–∞ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º.

class CardsRenderer {
  constructor(containerId) {
    this.container = document.getElementById(containerId);
    this.cards = [];
  }

//   fetchData() { ... }
//   createMarkup() { ... }
//   render() { ... }
}


// –ü–æ—è—Å–Ω—ñ—Ç—å, —è–∫ —É —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞—Ü—é—î filter.

const students = [];

const uniqueSortedCourses = students
  .flatMap(student => student.courses)
  .filter((course, index, array) => array.indexOf(course) === index)
  .toSorted((a, b) => a.localeCompare(b));

console.log(uniqueSortedCourses); // [""biology"", ""science"", ""literature"", ""mathematics"", ""physics""]





