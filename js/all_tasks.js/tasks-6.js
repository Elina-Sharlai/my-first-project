/**
 * -------------------------
 */
const book = {
  title: "React for beginners",
  showThis() {
    console.log("showThis -> this", this);
  },
  showTitle() {
    console.log("showTitle -> this.title", this.title);
  },
};

// book.showThis(); // –Ø–∫–∏–π this ??? {title: 'React for beginners', showThis: ∆í, showTitle: ∆í}

const outerShowThis = book.showThis;
// outerShowThis(); // –Ø–∫–∏–π this ??? showThis -> this undefined

const outerShowTitle = book.showTitle;
// outerShowTitle(); // –Ø–∫–∏–π this ??? Mistake

/**
 * –ù–∞–ø–∏—à—ñ—Ç—å –º–µ—Ç–æ–¥ calcTotalPrice(stoneName), —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –Ω–∞–∑–≤—É –∫–∞–º–µ–Ω—é —ñ
 * —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º–µ–Ω—ñ–≤ –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º, —Ü—ñ–Ω–æ—é —Ç–∞
 * –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ stones.
 */
const chopShop = {
    stones: [
        { name: "Emerald", price: 1300, quantity: 4 },
        { name: "Diamond", price: 2700, quantity: 3 },
        { name: "Sapphire", price: 1400, quantity: 7 },
        { name: "Ruby", price: 800, quantity: 2 },
    ],
    calcTotalPrice(stoneName) {
        const findStone = this.stones.find((stone) => {
            return stone.name === stoneName;
        })
        if (!findStone) {
            return "Sorry, your stone doesn't exist in our store";
        }
        return findStone.price * findStone.quantity;
        
    }
}
//   calcTotalPrice(stoneName) {
//     const findStone = this.stones.find(stone => {
//       return stone.name === stoneName;
//     });

//     if (!findStone) {
//       return "Sorry. Your stone doesnt exist is store";
//     }

//     return findStone.price * findStone.quantity;
//   },
// };

// console.log(chopShop.calcTotalPrice("Emerald")); // 5200
// console.log(chopShop.calcTotalPrice("Diamond"));/ // 8100
// console.log(chopShop.calcTotalPrice("Sapphire")); // 9800
// console.log(chopShop.calcTotalPrice("Ruby")); // 1600
// console.log(chopShop.calcTotalPrice("Sand")); // Sorry, your stone doesn't exist in our store

// –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [1, 2, 3, 4, 5]. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –≤—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É.
// –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç [1, 4, 9, 14, 25].

const array = [1, 2, 3, 4, 5];
const changeArr = (arr) => arr.map(number => Math.pow(number, 2));
  // return arr.map(number => number ** 2)
  
// console.log(changeArr(array));

// console.log('\n');
 
/** –î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ {id: 1, values: [1, 2, 3]}, {id: 2, values: [4, 5, 6]}, {id: 3, values: [7, 8, 9]}.
 *   –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞—Å–∏–≤—ñ–≤ values –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç—É, –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤ –æ–¥–Ω–æ–º—É –º–∞—Å–∏–≤—ñ.
 *  –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç [1, 2, 3, 4, 5, 6, 7, 8, 9]. */

const data = [
  { id: 1, values: [1, 2, 3] },
  { id: 2, values: [4, 5, 6] },
  { id: 3, values: [7, 8, 9] },
];

const flatArray = (arr) => {
  return arr.flatMap(item => item.values);
}
// console.log(flatArray(data));

/**–î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –æ–±'—î–∫—Ç, –º–µ–Ω—à–µ 20 —Ä–æ–∫—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç true. */

const people = [
  { name: "John", age: 27 },
  { name: "Jane", age: 31 },
  { name: "Bob", age: 19 },
];

const lessAge = arr => arr.some(item => item.age < 20);

// console.log(lessAge(people));

/**–î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [2, 4, 6, 8, 10]. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –ø–∞—Ä–Ω–∏–º */

const arr = [2, 4, 6, 8, 10];
const evenNumbers = arr => arr.every(number => number % 2 === 0);

// console.log(evenNumbers(arr));

/** –ó–Ω–∞–π–¥—ñ—Ç—å –ø–µ—Ä—à–µ –Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ */
const numbers = [2, 1, 6, 8, 9, 10, 12];
const firstOdd = arr => arr.find(number => number % 2 !== 0);

// console.log(firstOdd(numbers));

//** –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è [4, 2, 5, 1, 3] –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç [1, 2, 3, 4, 5] */

const normal = [4, 2, 5, 1, 3];
const raiser = arr => arr.toSorted((a, b) => a - b);
// console.log(raiser(normal));

/** –í—ñ–¥—Å–æ—Ä—Ç—É–π—Ç–µ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —É –ø–æ—Ä—è–¥–∫—É ["banana", "orange", "apple", "pear"] –∞–ª—Ñ–∞–≤—ñ—Ç—É.  */
const fruits = ["banana", "orange", "apple", "pear"];

const alphabet = arr => arr.toSorted((a, b) => a.localeCompare(b));
// console.log(alphabet(fruits));

/**–î–∞–Ω–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –≤—ñ–∫ –æ–±'—î–∫—Ç—ñ–≤ –±—ñ–ª—å—à–µ 20 —Ä–æ–∫—ñ–≤.*/

const peopleNew = [
  { name: "John", age: 27 },
  { name: "Jane", age: 31 },
  { name: "Bob", age: 19 },
];

const peopleSorted = arr => arr.filter(item => item.age > 20);
// console.log(peopleSorted(peopleNew));

/** –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª [1, 2, 3, 4, 5]. –ó–∞—Å—Ç–æ—Å—É–π—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É */

const num = [1, 2, 3, 4, 5];
const sum = arr => arr.reduce((acc, item) => acc += item, 0);
// console.log(sum(num));

/** –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, —è–∫–∏–π –º–∞—î —Ç–∞–∫—ñ –º–µ—Ç–æ–¥–∏:
 * –º–µ—Ç–æ–¥ number, —è–∫–∏–π –Ω–∞–±—É–≤–∞—î –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
 * –º–µ—Ç–æ–¥ getResult, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—Ö —ñ–∑ —á–∏—Å–ª–æ–º
 * –º–µ—Ç–æ–¥–∏ add, substruct, divide, multiply
 * –û–±'—î–∫—Ç –∫–ª–∞—Å—É –º–æ–∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ –ª–∞–Ω—Ü—é–∂–∫–∞
 */

class Calculator {
  constructor() {
    this.results = 0;
  }
  number(num) {
    this.results = num;
    return this;
  }
  getResult(){
    return this.results;
  }
  add(num) {
    this.results += num;
    return this;
  }
  substruct(num) {
    this.results -= num;
    return this;
  }
  divide(num) {
    this.results /= num;
    return this;

  }
  multiply(num) {
      this.results *= num;
    return this;  
  }
};

const calculator = new Calculator();
// console.log(calculator.getResult());

const res = calculator.number(10).add(5).multiply(3).substruct(5).divide(8).getResult();
// console.log("üöÄ ~ res:", res);

/**–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Client, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login email
 * –æ–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login #email, –¥–æ—Å—Ç—É–ø –¥–æ –Ω–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä —Å–µ—Ç–µ—Ä
 */

class Client {
  #login;
  #email;
  constructor(login, email) {
    this.#login = login;
    this.#email = email;
  }
  get getlogin() {
    return this.#login;
  }
  set changelogin(newLogin) {
    return this.#login = newLogin;
  }
};

const client = new Client("Elina", "elina@gmail.com");
client.changelogin = "Anatolii";
// console.log("üöÄ ~ client:", client.getlogin)

class Car {
  constructor(name, engine, tipe) {
    this.name = name;
    this.engine = engine;
    this.tipe = tipe;
  }
  getInfo() {
    return { name: this.name, engine: this.engine, tipe: this.tipe };
  }
  
};
const car = new Car("Hunday", "petrol", "crossower");
console.log("üöÄ ~ car:", car.getInfo());

class Example extends Car {
  constructor(color, year, name, engine, tipe) {
    super(name, engine, tipe);
    this.color = color;
    this.year = year;
    
  }
};

const example = new Example("green", "2022", "Hunday", "petrol", "crossower");
console.log("üöÄ ~ example:", example);
















